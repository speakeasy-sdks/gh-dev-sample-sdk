/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { Account } from "./account";
import { Buckets } from "./buckets";
import { Messages } from "./messages";
import { SharedEnvironments } from "./sharedenvironments";
import { TestEnvironments } from "./testenvironments";
import { Tests } from "./tests";
import { TestSteps } from "./teststeps";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.runscope.com/"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    runscopeAuth?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "0.5.0";
    genVersion = "2.283.1";
    userAgent = "speakeasy-sdk/typescript 0.5.0 2.283.1 1.0.0 Runscope-API";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Runscope API: Manage Runscope programmatically.
 */
export class RunscopeAPI {
    public account: Account;
    public buckets: Buckets;
    public sharedEnvironments: SharedEnvironments;
    public messages: Messages;
    public tests: Tests;
    public testEnvironments: TestEnvironments;
    public testSteps: TestSteps;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;

        if (!serverURL) {
            const serverIdx = props?.serverIdx ?? 0;
            if (serverIdx < 0 || serverIdx >= ServerList.length) {
                throw new Error(`Invalid server index ${serverIdx}`);
            }
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new shared.Security({ runscopeAuth: props?.runscopeAuth }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.account = new Account(this.sdkConfiguration);
        this.buckets = new Buckets(this.sdkConfiguration);
        this.sharedEnvironments = new SharedEnvironments(this.sdkConfiguration);
        this.messages = new Messages(this.sdkConfiguration);
        this.tests = new Tests(this.sdkConfiguration);
        this.testEnvironments = new TestEnvironments(this.sdkConfiguration);
        this.testSteps = new TestSteps(this.sdkConfiguration);
    }
}
