/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Error400 } from "./error400";
import { Meta } from "./meta";
import { classToPlain, Expose, Type } from "class-transformer";

export class Data extends SpeakeasyBase {}

export class StandardError extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => Data)
    data?: Data;

    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    @Type(() => Error400)
    error?: Error400;

    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    @Type(() => Meta)
    meta?: Meta;

    constructor(err?: StandardError) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "StandardError";
        Object.setPrototypeOf(this, StandardError.prototype);
    }
}
