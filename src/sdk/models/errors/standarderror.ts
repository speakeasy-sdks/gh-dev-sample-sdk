/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { classToPlain, Expose, Type } from "class-transformer";

export class Data extends SpeakeasyBase {}

/**
 * Unable to update template '{stepId}' for test '{testId}'
 */
export class StandardError extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => Data)
    data?: Data;

    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    @Type(() => shared.Error400)
    error?: shared.Error400;

    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    @Type(() => shared.Meta)
    meta?: shared.Meta;

    constructor(err?: StandardError) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "StandardError";
        Object.setPrototypeOf(this, StandardError.prototype);
    }
}
